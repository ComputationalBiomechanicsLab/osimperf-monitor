#!/bin/bash

# Exit immediately if any command exits with a non-zero status
set -ex
# Exit with a non-zero status if any command in a pipeline fails
set -o pipefail

echo
echo "Starting install script for opensim-core"

# Will install opensim-core in current directory.
INSTALL_DIR=$PWD

# Directory input arguments:
# - OSPC_BUILD_DIR
# - OSPC_OPENSIM_SRC

OSPC_BUILD_DIR=${OSPC_BUILD_DIR:="/tmp/osimperf-opensim-build"}
if [ -z $OSPC_OPENSIM_SRC ]; then
	echo "Path to opensim-core source code not set."
	exit 1
fi

# Set to remove build dir after completion.
OSPC_OPENSIM_RM_BUILD_DIR=${OSPC_OPENSIM_RM_BUILD_DIR:="OFF"}

# Cmake flags.
CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:="RelWithDebInfo"}
CMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE:="OFF"}

# OpenSim build flags.
BUILD_API_EXAMPLES=${BUILD_API_EXAMPLES:="ON"}
BUILD_API_ONLY=${BUILD_API_ONLY:="OFF"}
OPENSIM_BUILD_INDIVIDUAL_APPS=${OPENSIM_BUILD_INDIVIDUAL_APPS:="ON"}
OPENSIM_DOXYGEN_USE_MATHJAX=${OPENSIM_DOXYGEN_USE_MATHJAX:="OFF"}
OPENSIM_INSTALL_UNIX_FHS=${OPENSIM_INSTALL_UNIX_FHS:="ON"}
OSPC_NUM_JOBS=${OSPC_NUM_JOBS:="25"}
OSPC_OPENSIM_RUN_TESTS=${OSPC_OPENSIM_RUN_TESTS:="OFF"}
OPENSIM_WITH_MOCO=${OPENSIM_WITH_MOCO:="OFF"}

BUILD_TESTING=${BUILD_TESTING:="ON"}
if [ $OSPC_OPENSIM_RUN_TESTS == "ON" ]; then
	BUILD_TESTING="ON"
fi

echo "Installer directories:"
echo "    OSPC_OPENSIM_SRC=$OSPC_OPENSIM_SRC"
echo "    INSTALL_DIR=$INSTALL_DIR"
echo "    OSPC_BUILD_DIR=$OSPC_BUILD_DIR"

echo "Installer flags:"
echo "    OSPC_OPENSIM_RM_BUILD_DIR=$OSPC_OPENSIM_RM_BUILD_DIR"
echo "    OSPC_OPENSIM_RUN_TESTS=$OSPC_OPENSIM_RUN_TESTS"
echo "    OSPC_NUM_JOBS=$OSPC_NUM_JOBS"

mkdir -p $OSPC_OPENSIM_SRC
mkdir -p $INSTALL_DIR
mkdir -p $OSPC_BUILD_DIR

OPENSIM_BUILD_DIR="$OSPC_BUILD_DIR/opensim-core"

echo
echo "Start installing dependencies."
echo

# Check global variable.
RECONFIGURE=${OSPC_CLEAN:="OFF"}

ShouldReconfigureCmake() {
	BUILD_DIR="$1"; shift

	# Check global variable.
	RECONFIGURE=${OSPC_CLEAN:="OFF"}

	# If build dir does not exist, we should.
	if [ ! -d $BUILD_DIR ]; then
		RECONFIGURE="ON"
	fi

	# Try running cmake --build, if fails, try to reconfigure.
	if [ $RECONFIGURE == "OFF" ]; then
		set +e
		cmake --build $BUILD_DIR "-j$OSPC_NUM_JOBS" $@
		# If build was not succesful, reconfigure.
		if [ $? -eq 0 ]; then
			RECONFIGURE="OFF"
		else
			RECONFIGURE="ON"
		fi
		set -e
	fi
}

BUILD_DEPENDENCIES_FROM_SOURCE="OFF"

DEPENDENCIES_INSTALL_DIR="$INSTALL_DIR/opensim-core-dependencies-install"
if [ $BUILD_DEPENDENCIES_FROM_SOURCE = "OFF" ]; then
	# TODO HOTFIX!
	if [ $OPENSIM_WITH_MOCO == "ON" ]; then
		OSPC_OPENSIM_DEPENDENCIES_INSTALL_DIR="/home/pep/opensim/opensim-dependencies-install-moco"
	else
		OSPC_OPENSIM_DEPENDENCIES_INSTALL_DIR="/home/pep/opensim/opensim-dependencies-install"
	fi
	echo "Path to dependencies install: $OSPC_OPENSIM_DEPENDENCIES_INSTALL_DIR"
	rsync -av $OSPC_OPENSIM_DEPENDENCIES_INSTALL_DIR/ $DEPENDENCIES_INSTALL_DIR
else
	echo "Start building dependencies from source."
	echo "PANIC: not implemented!"
	exit 1

	DEPENDENCIES_BUILD_DIR="$OSPC_BUILD_DIR/dependencies"

	ShouldReconfigureCmake $DEPENDENCIES_BUILD_DIR
	if [ $RECONFIGURE == "ON" ]; then

		cmake \
			-B "$DEPENDENCIES_BUILD_DIR" \
			-S "$OSPC_OPENSIM_SRC/dependencies" \
			-DCMAKE_INSTALL_PREFIX=$DEPENDENCIES_INSTALL_DIR \
			-DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE\
			-DOPENSIM_WITH_CASADI=$OPENSIM_WITH_MOCO\
			-DOPENSIM_WITH_TROPTER=$OPENSIM_WITH_MOCO
			# -DSUPERBUILD_ezc3d=on \
		
		# Print dependencies cmake config.
		cmake "$DEPENDENCIES_BUILD_DIR" -LAH
		
		# Build dependencies.
		cmake --build $DEPENDENCIES_BUILD_DIR "-j$OSPC_NUM_JOBS"

	else
		cmake "$DEPENDENCIES_BUILD_DIR" -LAH
	fi
fi

echo "Completed installing dependencies."

echo
echo "Start installing opensim-core."
echo

OPT_PREFIX_PATH_ARG=""
if [ $OPENSIM_WITH_MOCO == "OFF" ]; then
	OPT_PREFIX_PATH_ARG="-DCMAKE_PREFIX_PATH=$DEPENDENCIES_INSTALL_DIR"
else
	OPT_PREFIX_PATH_ARG="-DOPENSIM_DEPENDENCIES_DIR=$DEPENDENCIES_INSTALL_DIR"
fi
echo "Adding arg: $OPT_PREFIX_PATH_ARG"

ShouldReconfigureCmake $OPENSIM_BUILD_DIR --target install
if [ $RECONFIGURE == "ON" ]; then
	cmake \
		-G "Unix Makefiles" \
		-B "$OPENSIM_BUILD_DIR" \
		-S $OSPC_OPENSIM_SRC \
		-DBUILD_API_EXAMPLES=$BUILD_API_EXAMPLES \
		-DBUILD_API_ONLY=$BUILD_API_ONLY \
		-DBUILD_JAVA_WRAPPING=$BUILD_JAVA_WRAPPING \
		-DBUILD_PYTHON_WRAPPING=$BUILD_PYTHON_WRAPPING \
		-DBUILD_TESTING=$BUILD_TESTING \
		-DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
		-DCMAKE_EXPORT_COMPILE_COMMANDS="ON" \
		-DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
		-DCMAKE_VERBOSE_MAKEFILE=$CMAKE_VERBOSE_MAKEFILE \
		-DOPENSIM_BUILD_INDIVIDUAL_APPS=$OPENSIM_BUILD_INDIVIDUAL_APPS \
		-DOPENSIM_DOXYGEN_USE_MATHJAX=$OPENSIM_DOXYGEN_USE_MATHJAX \
		-DOPENSIM_INSTALL_UNIX_FHS=$OPENSIM_INSTALL_UNIX_FHS \
		-DOPENSIM_WITH_CASADI=$OPENSIM_WITH_MOCO \
		-DOPENSIM_WITH_TROPTER=$OPENSIM_WITH_MOCO \
		$OPT_PREFIX_PATH_ARG
		# -DBUILD_JAVA_WRAPPING=on \
		# -DBUILD_PYTHON_WRAPPING=on \
		# -DOPENSIM_C3D_PARSER=ezc3d \
		# -DSWIG_DIR=~/swig/share/swig \
		# -DSWIG_EXECUTABLE=~/swig/bin/swig

	# Note: If you also provide PREFIX_PATH it messes up the paths to the dependencies, and cannot find ipopt anymore.
	# So do not set: -DCMAKE_PREFIX_PATH=$DEPENDENCIES_INSTALL_DIR
	
	# Print opensim-core cmake config.
	cmake "$OPENSIM_BUILD_DIR" -LAH
	
	cmake \
		--build $OPENSIM_BUILD_DIR \
		--target "install" \
		"-j$OSPC_NUM_JOBS"
else
	cmake "$OPENSIM_BUILD_DIR" -LAH
fi

# Create symlink to compile_commands.json for IDE.
ln_from="$OPENSIM_BUILD_DIR/compile_commands.json"
ln_to="$OSPC_OPENSIM_SRC/compile_commands.json"
if [ "$ln_from" != "$ln_to" ]; then
	ln -sf $ln_from $ln_to
	echo "Created symlink: from $ln_from to $ln_to"
fi

echo "Completed installing opensim-core."

if [ "$OSPC_OPENSIM_RUN_TESTS" == "ON" ]; then
	echo "Run opensim-core unit-tests:"
	if [ -z "$OSPC_OPENSIM_SELECT_TEST" ]; then
		env -C $OPENSIM_BUILD_DIR ctest --parallel $OSPC_NUM_JOBS --output-on-failure
	else
		env -C $OPENSIM_BUILD_DIR ctest --parallel $OSPC_NUM_JOBS --output-on-failure -VV -R $OSPC_OPENSIM_SELECT_TEST
		# for selected_test in $(ls $OPENSIM_BUILD_DIR | grep $OSPC_OPENSIM_SELECT_TEST); do
		# 	selected_test="$(basename $selected_test)"
		# 	echo "Run selected test: $selected_test"
		# 	env -C $OPENSIM_BUILD_DIR "./$selected_test"
		# done
	fi
fi

if [ "$OSPC_OPENSIM_RM_BUILD_DIR" == "ON" ]; then
	echo "Remove build dir: $OSPC_BUILD_DIR"
	rm -rf $OSPC_BUILD_DIR
fi
